第5章 队列
	队列是一种先进先出（FIFO,first-in-first-out）的数据结构。用于操作系统执行进程，打印任务池等。
	使用数组来实现队列看起来顺理成章，JavaScript中的数据具有其他编程语言没有的优点。数组的push()可以在数组末尾添加元素，shift()删除第一个元素。
	../Queue/Queue.js
		1.属性：dataStore
		2.方法：enqueue，dequeue，front，back，toString，empty
			front和back读取队首和队尾。empty判断队列是否为空。
	../Queue/testQueue.js(依赖../Queue/Queue.js)
		测试队列对象Queue。
	../Queue/dance.js(依赖../Queue/Queue.js)
		方块舞的舞伴分配问题。
		给Queue对象添加count()方法。用来判断时候有没有舞伴的人。
	../Queue/order.js(依赖../Queue/Queue.js)
		基数排序。
	../Queue/PriorityQueue.js
		优先队列。是一种不完全遵守先进先出约定的队列，需要考虑元素的优先权。修改dequeue()方法，队列内存着对象，对象带有code属性。code值小的优先级高。修改toString()方法，输出对象的name属性。
	../Queue/emergencyDepartment.js(依赖../Queue/PriorityQueue.js)
		模拟急诊科治疗顺序。测试优先队列。
		这里输出结果和书中结果不符。书中第一次输出的是code为4的Jones。书中的代码是正确的，但结果是错误的，这个结果和github上资料代码对应，我认为github上的代码是错误的，。
	【练习】
	../Queue/Exercise/Deque.js
	../Queue/Exercise/testDeque.js
		练习1，创建双向队列。测试双向队列。
	../Queue/Exercise/palindrome.js(依赖../Queue/Exercise/Deque.js)
		练习2，使用双向队列判断回文。
	练习3是../Queue/emergencyDepartment.js的扩展，只需要修改../Queue/PriorityQueue.js中dequeue()判断的“<”为“>”。
	和练习4也是../Queue/emergencyDepartment.js的扩展。增加html页面方便交互和显示。