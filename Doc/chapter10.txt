第10章 二叉树和二叉查找树
	树是一种非线性的数据结构，以分层的方式存储数据。经常被用来存储具有层级关系的数据。
	树可以分为几个层次，根节点是第0层，树的层数就是树的深度。
	二叉树是一种特殊的树。二叉树具有一些特殊的计算性质，使得在它们之上的一些操作异常高效。
	二叉树上进行查找非常快(链表则较慢)，为二叉树添加或删除元素也非常快（数组则较慢）。
	二叉查找树是一种特殊的二叉树，相对较小的值保存在左节点，较大的值保存在右节点。
	../Tree/BST.js
		二叉查找树(binary search tree)。实现节点Node类，和二叉查找树BST类。
		Node：
			属性：data,left,right
			方法：show()返回data
		BST：
			属性：root(初始值为null)
			方法：insert，inOrder，preOrder，postOrder，getMin，getMax，find，remove，getSmallest
			inOrder，preOrder，postOrder不是BST的内置方法，但仍然放在同一文件中。
			remove(),在BST上删除节点的操作最复杂。为了管理删除操作的复杂度，这里使用递归操作。
			removeNode()是remove的辅助方法，实际上remove只是简单接收删除数据，主要功能都在这里完成。
			首先循环查找待删除节点；找到后分为三种情况：
			1.它是叶子节点，将它的父节点指向它的链接指向null；
			2.它只有一个子节点，将它的父节点指向它的子节点；
			3.它有两个子节点，正确的做法有两种：要么查找待删除节点左子树上的最大值，要么查找待删除节点右子树上的最小值。这里使用第二种,使用辅助方法getSmallest()。
			getSmallest()和getMin()不同，不是内置方法，getMin返回整棵树的最小值，getSmallest参数为节点，返回对应节点子树的最小节点。
	../Tree/testTraversal.js(依赖../Tree/BST.js)
		测试中序、先序、后序遍历。
	../Tree/testMinMax.js(依赖../Tree/BST.js)
		测试最大最小值获取。
	../Tree/testFind.js(依赖../Tree/BST.js)
		测试查找给定值。
	../Tree/testRemove.js(依赖../Tree/BST.js)
		测试删除节点。
	../Tree/grade.js(依赖../Tree/BST.js)
		BST的一个用途是记录一组数据集中数据出现的次数。这里记录成绩分布。
		修改Node对象，增加count属性，初始值为1。
		修改BST对象，增加update方法，找到对应节点后将其count值+1。
		书上采用输入值查询，这里使用一个display方法递归遍历输出data和count。
	【练习】
	../Tree/Exercise/testCount.js(依赖../Tree/BST.js)
		练习1，获取BST中节点的个数。
	../Tree/Exercise/testEdgeCount.js(依赖../Tree/BST.js)
		练习2，获取BST中边的个数。
	练习3，练习4见BST.js的getMin(),getMax()。
	../Tree/Exercise/wordCount.js(依赖../Tree/BST.js)
		练习5，记录文本中每个单词出现的次数。