第3章 列表
	抽象数据类型(ADT)。
	列表用于元素不是太多，尤其是不需要在很长的序列中查找元素，或者进行排序时。
	实际使用时元素的数量受到程序内存的限制。
	../List/List.js
		1.属性：dataStore，listSize，pos
			这里使用listSize来保存列表长度，listSize的值和dataStore.length应该一样，但是还是用一个属性单独保存出来，提高读取的效率。在需要循环dataStore的时候，仍然用dataStore.length作判断。这种写法不知道是作者的习惯，还是另有深意。（后面有提到原因，当数组的键是字符串，length会失效，始终为0）
		2.常规方法：find，append，remove，length，toString，insert，clear，contains
			find和contains类似，find返回位置，contains返回bool。
			insert方法实现中，注意this.dataStore.splice(insertPos+1,0,element);位置要+1。
			clear方法实现中，使用delete操作符，用于删除对象的某个属性。这里并不合适，delete this.dataStore后，List对象中没有了dataStore属性，无法获取dataStore.length，append等其他方法都会报错。delete的使用在后面还会遇到。见第7章字典。
		3.遍历方法：front，end，prev，next，currPos，moveTo，getElement，hasNext，hasPrev
			prev和next都会修改this.pos，但是next中判断是否是末尾，prev却没有判断是否是开头。
			hasNext和hasPrev方法判断时其实判断的是当前元素是否有效，也就是说返回true的情况要包含最后一个和第一个。这里仔细看迭代器的写法就会明白。
		4.迭代器
			优点：
			(1)访问列表元素时不必关心底层的数据结构；
			(2)当为列表添加一个元素时，索引值就不对了，此时只能更新列表，而不能更新迭代器；
			(3)可以用不同类型的数据存储方式实现cList类，迭代器为访问列表中的元素提供了一种统一的方法。
			迭代器只能用来在列表上移动，不应该和列表增加或者删除元素的方法一起使用。
	../List/testList.js(依赖../List/List.js)
		测试列表对象List的方法和迭代器。
	../List/film.js(依赖../List/List.js)
		基于列表实现一个类似Redbox的影碟租赁自助查询系统。包含Customer对象和createArr，dispalyList，checkout三个方法。
		instanceof操作符判断该元素是否是Customer对象。
	【练习】
	../List/Exercise/specialAdd.js(依赖../List/List.js)
		练习1和练习2修改List对象，添加maxAdd和minAdd方法。在specialAdd.js中测试。
	../List/Exercise/specialAddV2.js(依赖../List/List.js)
		另外实现了一种使用迭代器的方法实现练习1和练习2。意义不大，仅作为迭代器使用的练习。添加迭代器方法的maxAdd，minAdd，displayList。
	../List/Exercise/person.js(依赖../List/List.js)
		练习3
	../List/film.js(依赖../List/List.js)
		练习4和练习5，在film文件中直接进行扩展。添加已租影片列表rentList和归还影片处理方法CheckIn。