第9章 集合
	集合的两个重要特性，首先集合中的成员是无序的，其次，集合中不允许相同成员存在。
	../Set/Set.js
		属性：dataStore
		方法：add，remove，size，show，contains，union，intersect，subset，difference
			add(),判断要添加元素是否在集合中，不在则添加。
			contains()，辅助方法，检车一个成员是否属于该集合。
			union()，并集。
			intersect()，交集。
			size()，辅助方法，判断集合成员个数。
			A.subset(B)，A是否是B的子集。先根据集合元素数量进行初步判断。
			A.difference(B)，属于A不属于B，A-B,补集。
	../Set/testAddRemove.js(依赖../Set/Set.js)
		测试集合类的添加，删除，展示方法。
	../Set/testUnion.js(依赖../Set/Set.js)
		测试并集。
	../Set/testIntersect.js(依赖../Set/Set.js)
		测试交集。
	../Set/testSubset.js(依赖../Set/Set.js)
		测试子集。
	../Set/testDifferent.js(依赖../Set/Set.js)
		测试补集。
	【练习】
	../Set/Exercise/testSortAdd.js(依赖../Set/Set.js)
		时元素按顺序存储，给../Set/Set.js添加sortAdd()方法，在testSortAdd.js中测试。
	../Set/Exercise/LListSet.js(依赖../LList/LList.js)
		使用链表模拟集合，包括下面涉及的higher和lower方法，用之前测试Set的代码进行测试即可。给LList类的find方法进行一点修改，循环的时候设置currNode.next != null，判断集合中是否存在某元素使用if(this.dataStore.find(data).element != data)，由于链表和集合中都有remove方法，将其中一个改为remove1。show方法调用链表的display方法，直接输出，不再使用返回值输出。有些涉及循环的地方可以使用extentLList的advance方法进行优化。
	../Set/Exercise/testHigher.js(依赖../Set/Set.js)
		返回比传入元素大的元素中最小的那个，给../Set/Set.js添加higher()方法，使用testHigher.js测试。
	../Set/Exercise/testLower.js(依赖../Set/Set.js)
		返回比传入元素小的元素中最大的那个，给../Set/Set.js添加lower()方法，使用testLower.js测试。