第8章 散列
	散列表插入、删除和取用数据都非常的快，对于查找操作来说效率低下，比如查找最大最小值。
	使用散列表存储数据时，通过一个散列函数将键映射为一个数字，这个数字的范围是0到散列表的长度。
	理想情况下，散列函数会将每个键值映射为一个唯一的数组索引。实际中，散列函数的目标是让散列函数尽量将键均匀的映射到数组中。两个键映射成同一个值的现象称为碰撞（collision）。
	最简单的散列函数就是以数组的长度对键取余，这时候数组长度最好为质数，散列会分布的更均匀，称之为除留余数法。
	散列函数的要点：
		1.数组长度应该是一个质数。
		2.好的散列函数
	../HashTable/HashTable.js
		属性：table
		方法：showDistro，simpleHash，betterHash，putSimpleHash
			simpleHash()除留余数法，通过使用JavaScript的charCodeAt()函数，返回每个字符的ASCII码值。相加求余后是散列的索引。
			putSimpleHash()使用除留余数法作为散列函数进行数据插入。
			betterHash()霍纳算法，先计算字符串中各字符的ASCII码值，不过求和时每次要给前一个和乘以一个质数，再加当前的。大多数算法书建议使用一个较小的质数(31、37等)。
			putBetterHash()使用霍纳算法作为散列函数进行数据插入。
	../HashTable/testPutSimpleHash.js(依赖../HashTable/HashTable.js)
		测试散列，除留余数法。输入字符串，易发生碰撞。
	../HashTable/testPutHashTable.js(依赖../HashTable/HashTable.js)
		测试散列，霍纳算法。输入字符串，较少发生碰撞。书中betterHash使用质数37，该例子依然会发生碰撞，31则不会发生碰撞。
	../HashTable/StuData.js(依赖../HashTable/HashTable.js)
		散列化整型键。
	../HashTable/testGetPut.js(依赖../HashTable/HashTable.js)
		测试散列表根据键存取值。
		给HashTable.js添加putByKey()和getByKey()方法。处理键值对形式的数据，对键散列化。
	碰撞处理：开链法和线性探测法。
	开链法：
		开链法是指实现散列表的底层数组中，每个数组元素又是一个新的数据结构。
		开链法的实现方法是：在创建存储散列过的键值得数组时，通过调用一个函数创建一个新的空数组，然后将该数组赋给散列表里的每个数组元素。
	../HashTable/testChains.js(依赖../HashTable/HashTable.js)
		测试开链法。
		给HashTable.js添加buildChains()方法,用来创建第二组数组，我们称这个数组为链。添加showChainDistro()用于输出。
	../HashTable/testChainsByKey.js(依赖../HashTable/HashTable.js)
		测试带键的开链法。
		给HashTable.js添加putChainByKey()和getChainByKey()方法。链中每次记录两个数据，第一个key，第二个data。
	线性探测法：
		线性探测法隶属于一种更一般化的散列技术：开放寻址散列。
		当发生碰撞时，线性探测法检查散列表中的下一个位置是否为空。直到找到一个空的位置为止。
		当存储数据使用的数组特别大时，选择线性探测法要比开链法好。
		如果数组的大小是待存储数据个数的1.5倍，那么使用开链法，如果数组的大小是待存储数据的两倍及两倍以上时，那么使用线性探测法。
	../HashTable/testLinearProbing.js(依赖../HashTable/HashTable.js)
		测试线性探测法。
		给HashTable.js添加values = [],table保存key，values保存data。
		给HashTable.js添加putLinearProbing()和getLinearProbing()方法。
	【练习】
		../HashTable/Exercise/linearProbingDictionary.js(依赖../HashTable/HashTable.js)
			线性探测法构建字典。
		../HashTable/Exercise/separateChainingDictionary.js(依赖../HashTable/HashTable.js)
			开链法构建字典。
		../HashTable/Exercise/wordCount.js(依赖../HashTable/HashTable.js)
			散列表显示文本中出现的单词和出现次数。